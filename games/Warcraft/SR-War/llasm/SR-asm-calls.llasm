;;
;;  Copyright (C) 2016-2023 Roman Pauer
;;
;;  Permission is hereby granted, free of charge, to any person obtaining a copy of
;;  this software and associated documentation files (the "Software"), to deal in
;;  the Software without restriction, including without limitation the rights to
;;  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
;;  of the Software, and to permit persons to whom the Software is furnished to do
;;  so, subject to the following conditions:
;;
;;  The above copyright notice and this permission notice shall be included in all
;;  copies or substantial portions of the Software.
;;
;;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;;  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;;  SOFTWARE.
;;

include llasm.llinc
include SR-asm-calls.llinc

func Game_errno

funcv Game_Sync

; stack params
func CLIB_vfprintf *stream, *format, *ap
func CLIB_vprintf *format, *ap
func CLIB_vsprintf *str, *format, *ap
func Game_open *pathname, flags, mode
func Game_openFlags flags

func Game_AIL_active_sample_count *dig
func Game_AIL_allocate_sample_handle *dig
funcv Game_AIL_end_sample *S
funcv Game_AIL_init_sample *S
func Game_AIL_register_EOS_callback *S, *EOS
funcv Game_AIL_release_sample_handle *S
func Game_AIL_sample_status *S
funcv Game_AIL_set_digital_master_volume *dig, master_volume
funcv Game_AIL_set_sample_address *S, *start, len
funcv Game_AIL_set_sample_loop_count *S, loop_count
funcv Game_AIL_set_sample_pan *S, pan
funcv Game_AIL_set_sample_playback_rate *S, playback_rate
funcv Game_AIL_set_sample_type *S, format, flags
funcv Game_AIL_set_sample_volume *S, volume
funcv Game_AIL_start_sample *S

func Game_AIL_allocate_sequence_handle *mdi
funcv Game_AIL_end_sequence *S
func Game_AIL_init_sequence *S, *start, sequence_num
funcv Game_AIL_release_sequence_handle *S
funcv Game_AIL_resume_sequence *S
func Game_AIL_sequence_status *S
funcv Game_AIL_set_sequence_loop_count *S, loop_count
funcv Game_AIL_set_sequence_volume *S, volume, ms
funcv Game_AIL_start_sequence *S
funcv Game_AIL_stop_sequence *S
; 0 params
func Game_clock
; 1 param
func close fd
func Game_cputs *buf
funcv Game_delay milliseconds
funcv Game_dos_gettime *dtime
funcv Game_ExitMain_Asm status
func fclose *stream
func fgetc *stream
funcv free *ptr
func ftell *stream
func getenv *name
func Game_inp port
func malloc size
func puts *s
func Game_raise condition
func strlen *s
func time *tloc
func Game_unlink *pathname
; 2 params
func Game_fopen *filename, *mode
func fputc c, *stream
func fputs *s, *stream
func Game_outp port, value
func Game_signal signum, *handler
func strcat *dest, *src
func strcmp *s1, *s2
func strcpy *dest, *src
func strrchr *s, c
; 3 params
func fgets *s, size, *stream
func fseek *stream, offset, whence
func lseek fd, offset, whence
func memcmp *s1, *s2, n
func memcpy *dest, *src, n
func memmove *dest, *src, n
func memset *s, c, n
func read fd, *buf, count
func strncmp *s1, *s2, n
func strncpy *dest, *src, n
func strncasecmp *s1, *s2, n
func Game_strtoul *nptr, *endptr, base
; 4 params
func Game_fmemset *s, s_seg, c, n
func fread *ptr, size, nmemb, *stream
func fwrite *ptr, size, nmemb, *stream
func Game_int386x IntNum, *in_regs, *out_regs, *seg_regs
func Game_setvbuf *fp, *buf, mode, size
; 5 params
func Game_fmemcmp *s1, s1_seg, *s2, s2_seg, n
func Game_fmemcpy *dest, dest_seg, *src, src_seg, n

extern errno_val


proc SR_Sync public

        Game_Call_Asm_Reg0_void Game_Sync,-1

endp ; end procedure SR_Sync

; null procedures
proc SR___GETDS public

        tcall null_procedure

endp ; end procedure SR___GETDS

proc SR__harderr public

        tcall null_procedure

endp ; end procedure SR__harderr

proc null_procedure public

        ;retn
        Game_Call_Asm_Return -1, 0

endp ; end procedure null_procedure

; stack params
proc SR_fprintf public

; [esp + 3*4] = ...
; [esp + 2*4] = const char *format
; [esp +   4] = FILE *fp
; [esp      ] = return address

        Game_Call_Asm_VariableStack2 CLIB_vfprintf,-1

endp ; end procedure SR_fprintf

proc SR_printf public

; [esp + 2*4] = ...
; [esp +   4] = const char *format
; [esp      ] = return address

        Game_Call_Asm_VariableStack1 CLIB_vprintf,-1

endp ; end procedure SR_printf

proc SR_sprintf public

; [esp + 3*4] = ...
; [esp + 2*4] = const char *format
; [esp +   4] = char *buf
; [esp      ] = return address

        Game_Call_Asm_VariableStack2 CLIB_vsprintf,-1

endp ; end procedure SR_sprintf

proc SR_open public

; [esp + 3*4] = ...
; [esp + 2*4] = int access
; [esp +   4] = const char *path
; [esp      ] = return address


; errno_val is set inside Game_open

        add tmp0, esp, 2*4
        load tmp0, tmp0, 4					; access (flags)
        call Game_openFlags tmp0
        mov tmp1, tmp0						; access (flags)

        add tmp0, esp, 4
        load tmp0, tmp0, 4					; path
        add tmp2, esp, 3*4
        load tmp2, tmp2, 4					; ...
        call Game_open tmp0, tmp1, tmp2
        mov eax, tmp0

        Game_Call_Asm_Return -1, 0

endp ; end procedure SR_open

proc SR_AIL_active_sample_count public

; [esp +   4] = void *dig
; [esp      ] = return address

        Game_Call_Asm_Stack1 Game_AIL_active_sample_count,-1

endp ; end procedure SR_AIL_active_sample_count

proc SR_AIL_allocate_sample_handle public

; [esp +   4] = void *dig
; [esp      ] = return address

        Game_Call_Asm_Stack1 Game_AIL_allocate_sample_handle,-1

endp ; end procedure SR_AIL_allocate_sample_handle

proc SR_AIL_end_sample public

; [esp +   4] = AIL_sample *S
; [esp      ] = return address

        Game_Call_Asm_Stack1_void Game_AIL_end_sample,-1

endp ; end procedure SR_AIL_end_sample

proc SR_AIL_init_sample public

; [esp +   4] = AIL_sample *S
; [esp      ] = return address

        Game_Call_Asm_Stack1_void Game_AIL_init_sample,-1

endp ; end procedure SR_AIL_init_sample

proc SR_AIL_register_EOS_callback public

; [esp + 2*4] = AIL_sample_CB EOS
; [esp +   4] = AIL_sample *S
; [esp      ] = return address

        Game_Call_Asm_Stack2 Game_AIL_register_EOS_callback,-1

endp ; end procedure SR_AIL_register_EOS_callback

proc SR_AIL_release_sample_handle public

; [esp +   4] = AIL_sample *S
; [esp      ] = return address

        Game_Call_Asm_Stack1_void Game_AIL_release_sample_handle,-1

endp ; end procedure SR_AIL_release_sample_handle

proc SR_AIL_sample_status public

; [esp +   4] = AIL_sample *S
; [esp      ] = return address

        Game_Call_Asm_Stack1 Game_AIL_sample_status,-1

endp ; end procedure SR_AIL_sample_status

proc SR_AIL_set_digital_master_volume public

; [esp + 2*4] = int32_t master_volume
; [esp +   4] = void *dig
; [esp      ] = return address

        Game_Call_Asm_Stack2_void Game_AIL_set_digital_master_volume,-1

endp ; end procedure SR_AIL_set_digital_master_volume

proc SR_AIL_set_sample_address public

; [esp + 3*4] = uint32_t len
; [esp + 2*4] = void *start
; [esp +   4] = AIL_sample *S
; [esp      ] = return address

        Game_Call_Asm_Stack3_void Game_AIL_set_sample_address,-1

endp ; end procedure SR_AIL_set_sample_address

proc SR_AIL_set_sample_loop_count public

; [esp + 2*4] = int32_t loop_count
; [esp +   4] = AIL_sample *S
; [esp      ] = return address

        Game_Call_Asm_Stack2_void Game_AIL_set_sample_loop_count,-1

endp ; end procedure SR_AIL_set_sample_loop_count

proc SR_AIL_set_sample_pan public

; [esp + 2*4] = int32_t pan
; [esp +   4] = AIL_sample *S
; [esp      ] = return address

        Game_Call_Asm_Stack2_void Game_AIL_set_sample_pan,-1

endp ; end procedure SR_AIL_set_sample_pan

proc SR_AIL_set_sample_playback_rate public

; [esp + 2*4] = int32_t playback_rate
; [esp +   4] = AIL_sample *S
; [esp      ] = return address

        Game_Call_Asm_Stack2_void Game_AIL_set_sample_playback_rate,-1

endp ; end procedure SR_AIL_set_sample_playback_rate

proc SR_AIL_set_sample_type public

; [esp + 3*4] = uint32_t flags
; [esp + 2*4] = int32_t format
; [esp +   4] = AIL_sample *S
; [esp      ] = return address

        Game_Call_Asm_Stack3_void Game_AIL_set_sample_type,-1

endp ; end procedure SR_AIL_set_sample_type

proc SR_AIL_set_sample_volume public

; [esp + 2*4] = int32_t volume
; [esp +   4] = AIL_sample *S
; [esp      ] = return address

        Game_Call_Asm_Stack2_void Game_AIL_set_sample_volume,-1

endp ; end procedure SR_AIL_set_sample_volume

proc SR_AIL_start_sample public

; [esp +   4] = AIL_sample *S
; [esp      ] = return address

        Game_Call_Asm_Stack1_void Game_AIL_start_sample,-1

endp ; end procedure SR_AIL_start_sample


proc SR_AIL_allocate_sequence_handle public

; [esp +   4] = void *mdi
; [esp      ] = return address

        Game_Call_Asm_Stack1 Game_AIL_allocate_sequence_handle,-1

endp ; end procedure SR_AIL_allocate_sequence_handle

proc SR_AIL_end_sequence public

; [esp +   4] = AIL_sequence *S
; [esp      ] = return address

        Game_Call_Asm_Stack1_void Game_AIL_end_sequence,-1

endp ; end procedure SR_AIL_end_sequence

proc SR_AIL_init_sequence public

; [esp + 3*4] = int32_t sequence_num
; [esp + 2*4] = void *start
; [esp +   4] = AIL_sequence *S
; [esp      ] = return address

        Game_Call_Asm_Stack3 Game_AIL_init_sequence,-1

endp ; end procedure SR_AIL_init_sequence

proc SR_AIL_release_sequence_handle public

; [esp +   4] = AIL_sequence *S
; [esp      ] = return address

        Game_Call_Asm_Stack1_void Game_AIL_release_sequence_handle,-1

endp ; end procedure SR_AIL_release_sequence_handle

proc SR_AIL_resume_sequence public

; [esp +   4] = AIL_sequence *S
; [esp      ] = return address

        Game_Call_Asm_Stack1_void Game_AIL_resume_sequence,-1

endp ; end procedure SR_AIL_resume_sequence

proc SR_AIL_sequence_status public

; [esp +   4] = AIL_sequence *S
; [esp      ] = return address

        Game_Call_Asm_Stack1 Game_AIL_sequence_status,-1

endp ; end procedure SR_AIL_sequence_status

proc SR_AIL_set_sequence_loop_count public

; [esp + 2*4] = int32_t loop_count
; [esp +   4] = AIL_sequence *S
; [esp      ] = return address

        Game_Call_Asm_Stack2_void Game_AIL_set_sequence_loop_count,-1

endp ; end procedure SR_AIL_set_sequence_loop_count

proc SR_AIL_set_sequence_volume public

; [esp + 3*4] = int32_t ms
; [esp + 2*4] = int32_t volume
; [esp +   4] = AIL_sequence *S
; [esp      ] = return address

        Game_Call_Asm_Stack3_void Game_AIL_set_sequence_volume,-1

endp ; end procedure SR_AIL_set_sequence_volume

proc SR_AIL_start_sequence public

; [esp +   4] = AIL_sequence *S
; [esp      ] = return address

        Game_Call_Asm_Stack1_void Game_AIL_start_sequence,-1

endp ; end procedure SR_AIL_start_sequence

proc SR_AIL_stop_sequence public

; [esp +   4] = AIL_sequence *S
; [esp      ] = return address

        Game_Call_Asm_Stack1_void Game_AIL_stop_sequence,-1

endp ; end procedure SR_AIL_stop_sequence


; 0 params
proc SR_j___clock public

        tcall SR___clock

endp ; end procedure SR_j___clock

proc SR___clock public

        Game_Call_Asm_Reg0 Game_clock,-1

endp ; end procedure SR___clock


; 1 param
proc SR_j___close public

; eax = int handle

        tcall SR___close

endp ; end procedure SR_j___close

proc SR___close public

; eax = int handle

        Game_Call_Asm_Reg1 close,-1000

endp ; end procedure SR___close

proc SR_cputs public

; eax = int handle

        Game_Call_Asm_Reg1 Game_cputs,-1000

endp ; end procedure SR_cputs

proc SR_j___delay public

; eax = unsigned milliseconds

        tcall SR___delay

endp ; end procedure SR_j___delay

proc SR___delay public

; eax = unsigned milliseconds

        Game_Call_Asm_Reg1_void Game_delay,-1

endp ; end procedure SR___delay

proc SR__dos_gettime public

; eax = struct dostime_t *time

        Game_Call_Asm_Reg1_void Game_dos_gettime,-1

endp ; end procedure SR__dos_gettime

proc SR_exit public

; eax = int status

        ;jmp Game_ExitMain_Asm
        Game_Call_Asm_Reg1_void Game_ExitMain_Asm,-1

endp ; end procedure SR_exit

proc SR_fclose public

; eax = FILE *fp

        Game_Call_Asm_Reg1 fclose,-1000

endp ; end procedure SR_fclose

proc SR_fgetc public

; eax = FILE *fp

        Game_Call_Asm_Reg1 fgetc,-1000

endp ; end procedure SR_fgetc

proc SR__nfree public

; eax = void __near *ptr

        Game_Call_Asm_Reg1_void free,-1

endp ; end procedure SR__nfree

proc SR_ftell public

; eax = FILE *fp

        Game_Call_Asm_Reg1 ftell,-1000

endp ; end procedure SR_ftell

proc SR_getenv public

; eax = const char *name

        Game_Call_Asm_Reg1 getenv,-1

endp ; end procedure SR_getenv

proc SR_inp public

; eax = int port

        Game_Call_Asm_Reg1 Game_inp,-1

endp ; end procedure SR_inp

proc SR__nmalloc public

; eax = size_t size

        Game_Call_Asm_Reg1 malloc,-1

endp ; end procedure SR__nmalloc

proc SR_puts public

; eax = const char *buf

        Game_Call_Asm_Reg1 puts,-1000

endp ; end procedure SR_puts

proc SR_raise public

; eax = int condition

        Game_Call_Asm_Reg1 Game_raise,-1

endp ; end procedure SR_raise

proc SR_strlen public

; eax = const char *s

        Game_Call_Asm_Reg1 strlen,-1

endp ; end procedure SR_strlen

proc SR_time public

; eax = time_t *tloc

        Game_Call_Asm_Reg1 time,-1

endp ; end procedure SR_time

proc SR_j_unlink public

        tcall SR_unlink

endp ; end procedure SR_j_unlink

proc SR_unlink public

; eax = const char *path

; errno_val is set inside Game_unlink

        Game_Call_Asm_Reg1 Game_unlink,-1

endp ; end procedure SR_unlink


; 2 params
proc SR_fopen public

; eax = const char *filename
; edx = const char *mode

; errno_val is set inside Game_fopen

        Game_Call_Asm_Reg2 Game_fopen,-1

endp ; end procedure SR_fopen

proc SR_fputc public

; eax = int c
; edx = FILE *fp

    Game_Call_Asm_Reg2 fputc,-1000

endp ; end procedure SR_fputc

proc SR_fputs public

; eax = const char *buf
; edx = FILE *fp

    Game_Call_Asm_Reg2 fputs,-1000

endp ; end procedure SR_fputs

proc SR_outp public

; eax = int port
; edx = int value

        Game_Call_Asm_Reg2 Game_outp,-1

endp ; end procedure SR_outp

proc SR_signal public

; eax = int sig
; edx = void (*func)(int))

        Game_Call_Asm_Reg2 Game_signal,-1

endp ; end procedure SR_signal

proc SR_strcat public

; eax = char *dst
; edx = const char *src

        Game_Call_Asm_Reg2 strcat,-1

endp ; end procedure SR_strcat

proc SR_strcmp public

; eax = const char *s1
; edx = const char *s2

        Game_Call_Asm_Reg2 strcmp,-1

endp ; end procedure SR_strcmp

proc SR_strcpy public

; eax = char *dst
; edx = const char *src

        Game_Call_Asm_Reg2 strcpy,-1

endp ; end procedure SR_strcpy

proc SR_strrchr public

; eax = const char *s
; edx = int c

        Game_Call_Asm_Reg2 strrchr,-1

endp ; end procedure SR_strrchr

proc SR_vprintf public

; eax = const char *format
; edx = va_list arg

        ;mov edx, [edx]
        load edx, edx, 1
        Game_Call_Asm_Reg2 CLIB_vprintf,-1

endp ; end procedure SR_vprintf

; 3 params
proc SR_fgets public

; eax = char *buf
; edx = int n
; ebx = FILE *fp

        Game_Call_Asm_Reg3 fgets,-1000

endp ; end procedure SR_fgets

proc SR_fseek public

; eax = FILE *fp
; edx = long int offset
; ebx = int where

        Game_Call_Asm_Reg3 fseek,-1000

endp ; end procedure SR_fseek

proc SR_lseek public

; eax = int handle
; edx = long int offset
; ebx = int origin

        Game_Call_Asm_Reg3 lseek,-1000

endp ; end procedure SR_lseek

proc SR_memcmp public

; eax = const void *s1
; edx = const void *s2
; ebx = size_t length

        Game_Call_Asm_Reg3 memcmp,-1

endp ; end procedure SR_memcmp

proc SR_memcpy public

; eax = void *dst
; edx = const void *src
; ebx = size_t length

        Game_Call_Asm_Reg3 memcpy,-1

endp ; end procedure SR_memcpy

proc SR_memmove public

; eax = void *dst
; edx = const void *src
; ebx = size_t length

        Game_Call_Asm_Reg3 memmove,-1

endp ; end procedure SR_memmove

proc SR_memset public

; eax = void *dst
; edx = int c
; ebx = size_t length

        Game_Call_Asm_Reg3 memset,-1

endp ; end procedure SR_memset

proc SR_read public

; eax = int handle
; edx = void *buffer
; ebx = unsigned len

        Game_Call_Asm_Reg3 read,-1000

endp ; end procedure SR_read

proc SR_strncmp public

; eax = const char *s1
; edx = const char *s2
; ebx = size_t n

        Game_Call_Asm_Reg3 strncmp,-1

endp ; end procedure SR_strncmp

proc SR_strncpy public

; eax = char *dst
; edx = const char *src
; ebx = size_t n

        Game_Call_Asm_Reg3 strncpy,-1

endp ; end procedure SR_strncpy

proc SR_strnicmp public

; eax = const char *s1
; edx = const char *s2
; ebx = size_t len

        Game_Call_Asm_Reg3 strncasecmp,-1

endp ; end procedure SR_strnicmp

proc SR_strtoul public

; eax = const char *ptr
; edx = char **endptr
; ebx = int base

        Game_Call_Asm_Reg3 Game_strtoul,-1000

endp ; end procedure SR_strtoul


; 4 params
proc SR__fmemset public

; eax = void *dst
;  dx = segment of dst
; ebx = int c
; ecx = size_t length

        Game_Call_Asm_Reg4 Game_fmemset,-1

endp ; end procedure SR__fmemset

proc SR_fread public

; eax = void *buf
; edx = size_t elsize
; ebx = size_t nelem
; ecx = FILE *fp

        Game_Call_Asm_Reg4 fread,-1000

endp ; end procedure SR_fread

proc SR_fwrite public

; eax = const void *buf
; edx = size_t elsize
; ebx = size_t nelem
; ecx = FILE *fp

        Game_Call_Asm_Reg4 fwrite,-1000

endp ; end procedure SR_fwrite

proc SR_int386x public

; eax = int inter_no
; edx = const union REGS *in_regs
; ebx = union REGS *out_regs
; ecx = struct SREGS *seg regs

        Game_Call_Asm_Reg4 Game_int386x,-1

endp ; end procedure SR_int386x

proc SR_setvbuf public

; eax = FILE *fp
; edx = char *buf
; ebx = int mode
; ecx = size_t size

        Game_Call_Asm_Reg4 Game_setvbuf,-1000

endp ; end procedure SR_setvbuf

; 5 params
proc SR__fmemcmp public

; eax = const void *s1
;  dx = segment of s1
; ebx = const void *s2
;  cx = segment of s2
; [esp + 4] = size_t length
;
; [esp    ] = return address

        Game_Call_Asm_Reg5 Game_fmemcmp,-1

endp ; end procedure SR__fmemcmp

proc SR__fmemcpy public

; eax = void *dst
;  dx = segment of dst
; ebx = const void *src
;  cx = segment of src
; [esp + 4] = size_t length
;
; [esp    ] = return address

        Game_Call_Asm_Reg5 Game_fmemcpy,-1

endp ; end procedure SR__fmemcpy

