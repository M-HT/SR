#
#  Copyright (C) 2016-2025 Roman Pauer
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy of
#  this software and associated documentation files (the "Software"), to deal in
#  the Software without restriction, including without limitation the rights to
#  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
#  of the Software, and to permit persons to whom the Software is furnished to do
#  so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.
#

import os
import subprocess

# set help text
vars = Variables('custom.py')
vars.Add(EnumVariable('debug', 'Set debug level (0 = release version)', '0',
                                 allowed_values=('0', '1', '2'),
                                 ignorecase=2))
vars.Add(BoolVariable('mingw', 'Set to use MinGW instead of default compiler', False))
vars.Add(EnumVariable('device', 'Set target device', 'none',
                                 allowed_values=('none', 'pc-windows', 'pc-linux', 'arm-linux', 'gp2x', 'pandora', 'pyra', 'pc-linux-llasm', 'pandora-llasm', 'pyra-llasm', 'pc64-linux-llasm', 'arm64-linux-llasm'),
                                 ignorecase=2))
vars.Add(EnumVariable('sdl', 'Set SDL version', '2',
                                 allowed_values=('1', '2'),
                                 ignorecase=2))
vars.Add(EnumVariable('speexdsp', 'Use SpeexDSP library for higher quality resampling', '0',
                                 allowed_values=('0', '1'),
                                 ignorecase=2))
vars.Add(EnumVariable('executable', 'Set executable to compile', 'combined',
                                 allowed_values=('combined', 'geoscape', 'tactical'),
                                 ignorecase=2))
vars.Add(EnumVariable('version', 'Set version to compile (dos/gog)', 'none',
                                 allowed_values=('none', 'dos', 'gog'),
                                 ignorecase=2))
env = Environment(variables = vars)

debug = int(env['debug'])
mingw = env['mingw']
device = env['device']
sdl = int(env['sdl'])
speexdsp = int(env['speexdsp'])
executable = env['executable']
version = env['version']
clean = env.GetOption('clean')

if version == 'none':
    version = 'dos'
    env['version'] = version
    print("\nYou didn't set the version to compile (parameter 'version').")
    print("'" + version + "' version will be compiled.\n")

if device == 'none':
    device = 'pc-linux'
    if env['PLATFORM'] == 'win32':
        device = 'pc-windows'
    elif env['PLATFORM'] == 'posix':
        machine = os.uname()[4]
        if machine.startswith('arm'):
            device = 'arm-linux'
        elif machine == 'aarch64':
            device = 'arm64-linux-llasm'
    env['device'] = device
    print("\nYou didn't set any target device (parameter 'device').")
    print("'" + device + "' will be used for compiling.\n")

Help(vars.GenerateHelpText(env))

Help("""
Environment variables:
  - PATH_INC: paths to find include files
  - PATH_LIB: paths to find library files
""")

llasm_version = False
if device.endswith('-llasm'):
    llasm_version = True
    device = device[0:-6]

if device == 'gp2x' or device == 'pandora':
    sdl = 1
elif device == 'pyra':
    sdl = 2

if mingw:
    env = Environment(tools = ['mingw'])
elif env['CC'] == 'cl' and device == 'pc-windows':
    env = Environment(TARGET_ARCH = 'x86')

# default settings
if env['CC'] == 'cl':
    env.Append(CCFLAGS = '/O2 /W3 /D_CRT_SECURE_NO_WARNINGS')

    if debug == 1:
        env.Append(CCFLAGS = '/Zi')
    elif debug > 1:
        env.Append(CCFLAGS = '/Zi /D__DEBUG__')

    if speexdsp > 0:
        env.Append(CCFLAGS = '/DUSE_SPEEXDSP_RESAMPLER')
else:
    env.Append(CCFLAGS = '-O2 -Wall')

    if debug <= 0:
        env.Append(LINKFLAGS = '-s')
    elif debug == 1:
        env.Append(CCFLAGS = '-g')
    else:
        env.Append(CCFLAGS = '-g -D__DEBUG__')

    if speexdsp > 0:
        env.Append(CCFLAGS = '-DUSE_SPEEXDSP_RESAMPLER')

if speexdsp > 0:
    env.Append(LIBS = ['speexdsp'])

if 'PATH_INC' in os.environ:
    env.Append(CPPPATH = os.environ['PATH_INC'].split(os.pathsep))
if 'PATH_LIB' in os.environ:
    env.Append(LIBPATH = os.environ['PATH_LIB'].split(os.pathsep))


if device == 'pc-linux':
    env.Append(CCFLAGS    = '-m32',
               LINKFLAGS  = '-m32 -Wl,-z,noexecstack',
               CPPPATH    = ['/usr/local/include'],
               LIBPATH    = ['/usr/local/lib'],
               LLASMFLAGS = '-inline-idiv -inline-float',
               LLVMFLAGS  = '-mtriple=i686-unknown-linux-gnu'
              )
    if sdl == 2:
        env.Append(CCFLAGS = '-DUSE_SDL2',
                   LIBS    = ['SDL2_mixer', 'SDL2', 'pthread', 'm', 'dl']
                  )
    else:
        env.Append(CCFLAGS = '-DALLOW_OPENGL',
                   LIBS    = ['SDL_mixer', 'SDL', 'pthread', 'm', 'dl', 'GL']
                  )
elif device == 'pc64-linux':
    env.Append(CCFLAGS    = '-m64 -x c++',
               LINKFLAGS  = '-m64 -Wl,-z,noexecstack',
               CPPPATH    = ['/usr/local/include'],
               LIBPATH    = ['/usr/local/lib'],
               LLASMFLAGS = '-m64 -inline-idiv -inline-float',
               LLVMFLAGS  = '-mtriple=x86_64-unknown-linux-gnu'
              )
    if sdl == 2:
        env.Append(CCFLAGS = '-DUSE_SDL2',
                   LIBS    = ['SDL2_mixer', 'SDL2', 'pthread', 'm', 'dl']
                  )
    else:
        env.Append(CCFLAGS = '-DALLOW_OPENGL',
                   LIBS    = ['SDL_mixer', 'SDL', 'pthread', 'm', 'dl', 'GL']
                  )
elif device == 'arm-linux':
    env.Append(LINKFLAGS  = '-Wl,-z,noexecstack',
               CPPPATH    = ['/usr/local/include'],
               LIBPATH    = ['/usr/local/lib'],
               ASFLAGS    = '-I arm/'
              )
    if sdl == 2:
        env.Append(CCFLAGS = '-DUSE_SDL2',
                   LIBS    = ['SDL2_mixer', 'SDL2', 'pthread', 'm', 'dl']
                  )
    else:
        env.Append(CCFLAGS = '-DALLOW_OPENGL',
                   LIBS    = ['SDL_mixer', 'SDL', 'pthread', 'm', 'dl', 'GL']
                  )
    # see arm/armconf.inc for explanation of these options (and others)
    env.Append(ASFLAGS = '--defsym USE_R9=1 --defsym ALLOW_UNALIGNED_MEMORY_ACCESS=1')
elif device == 'arm64-linux':
    env.Append(CCFLAGS    = '-x c++',
               LINKFLAGS  = '-Wl,-z,noexecstack',
               CPPPATH    = ['/usr/local/include'],
               LIBPATH    = ['/usr/local/lib'],
               LLASMFLAGS = '-m64 -inline-idiv -inline-float',
               LLVMFLAGS  = '-mtriple=arm64-unknown-linux-gnu'
              )
    if sdl == 2:
        env.Append(CCFLAGS = '-DUSE_SDL2',
                   LIBS    = ['SDL2_mixer', 'SDL2', 'pthread', 'm', 'dl']
                  )
    else:
        env.Append(CCFLAGS = '-DALLOW_OPENGL',
                   LIBS    = ['SDL_mixer', 'SDL', 'pthread', 'm', 'dl', 'GL']
                  )
elif device == 'pc-windows':
    if env['CC'] == 'cl':
        env.Append(CCFLAGS   = '/Dmain=SDL_main /MD',
                   LINKFLAGS = '/SUBSYSTEM:windows'
                  )
    else:
        env.Append(CCFLAGS   = '-m32 -Dmain=SDL_main',
                   LINKFLAGS = '-m32 -mwindows'
                  )
    if sdl == 2:
        if env['CC'] == 'cl':
            env.Append(CCFLAGS = '/DUSE_SDL2',
                       LIBS    = ['SDL2main', 'SDL2_mixer', 'SDL2', 'user32', 'shell32']
                      )
        else:
            env.Append(CCFLAGS = '-DUSE_SDL2',
                       LIBS    = ['mingw32', 'SDL2main', 'SDL2_mixer', 'SDL2']
                      )
    else:
        if env['CC'] == 'cl':
            env.Append(CCFLAGS = '/DALLOW_OPENGL',
                       LIBS    = ['SDLmain', 'SDL_mixer', 'SDL', 'opengl32', 'user32']
                      )
        else:
            env.Append(CCFLAGS = '-DALLOW_OPENGL -D_GNU_SOURCE=1',
                       LIBS    = ['mingw32', 'SDLmain', 'SDL_mixer', 'SDL', 'opengl32']
                      )
elif device == 'gp2x':
    compiler_path = '/opt/open2x/gcc-4.1.1-glibc-2.3.6/'
    compiler_prefix = 'arm-open2x-linux-'

    env['CC']      = compiler_prefix + 'gcc'
    env['CXX']     = compiler_prefix + 'g++'
    env['CPPPATH'] = [compiler_path + 'include/SDL/midi', compiler_path + 'include/SDL', compiler_path + 'include']
    env['LIBPATH'] = [compiler_path + 'lib/mixer-midi', compiler_path + 'lib']
    env['AS']      = compiler_prefix + 'as'
    env['ENV']['PATH'] = compiler_path + 'bin' + os.pathsep + env['ENV']['PATH']
    env.Append(CCFLAGS   = '-DGP2X -march=armv4t -mtune=arm920t',
               LINKFLAGS = '-static -Wl,-z,noexecstack',
               LIBS      = ['SDL_mixer', 'SDL', 'pthread', 'm', 'armmem', 'dl'],
               ASFLAGS   = '-EL -march=armv4t -mfpu=softfpa -I arm/'
              )
    # see arm/armconf.inc for explanation of these options (and others)
    env.Append(ASFLAGS = '--defsym USE_R9=1 --defsym ALLOW_UNALIGNED_PC=1 --defsym ALLOW_UNALIGNED_STACK=1')
elif device == 'pandora':
    compiler_path = os.environ['PNDSDK'] + '/'
    compiler_prefix = 'pandora-'

    env['CC']      = compiler_prefix + 'gcc'
    env['CXX']     = compiler_prefix + 'g++'
    env['CPPPATH'] = [compiler_path + 'usr/include']
    env['LIBPATH'] = [compiler_path + 'usr/lib']
    env['AS']      = compiler_prefix + 'as'
    env['ENV']['PATH'] = compiler_path + 'bin' + os.pathsep + env['ENV']['PATH']
    env.Append(CCFLAGS   = '-DPANDORA -pipe -march=armv7-a -mcpu=cortex-a8 -mtune=cortex-a8 -mfpu=vfpv3 -mfloat-abi=softfp',
               LINKFLAGS = '-Wl,-z,noexecstack',
               LIBS      = ['SDL_mixer', 'mad', 'SDL', 'ts', 'pthread', 'm', 'dl'],
               ASFLAGS   = '-EL -march=armv7-a -mcpu=cortex-a8 -mfpu=vfpv3 -mfloat-abi=softfp -I arm/'
              )
    if llasm_version:
        env.Append(CCFLAGS    = ' -mthumb-interwork',
                   LLASMFLAGS = '-inline-float',
                   LLVMFLAGS  = '-mtriple=thumbv7a-unknown-linux-eabi -mcpu=cortex-a8 -float-abi=soft'
                  )
    # see arm/armconf.inc for explanation of these options (and others)
    env.Append(ASFLAGS = '--defsym USE_R9=1 --defsym ALLOW_UNALIGNED_MEMORY_ACCESS=1')
elif device == 'pyra':
    env.Append(CCFLAGS    = '-DUSE_SDL2 -DPYRA -pipe -march=armv7ve+simd -mcpu=cortex-a15 -mtune=cortex-a15 -mfpu=neon-vfpv4 -mfloat-abi=hard -mthumb',
               LINKFLAGS  = '-Wl,-z,noexecstack',
               LIBS       = ['SDL2_mixer', 'SDL2', 'pthread', 'm', 'dl'],
               ASFLAGS    = '-EL -march=armv7ve -mcpu=cortex-a15 -mfpu=neon-vfpv4 -mfloat-abi=hard -I arm/',
               LLASMFLAGS = '-inline-idiv -inline-float',
               LLVMFLAGS  = '-mtriple=thumbv7a-unknown-linux-eabi -mcpu=cortex-a15 -float-abi=hard'
              )
    # see arm/armconf.inc for explanation of these options (and others)
    env.Append(ASFLAGS = '--defsym USE_R9=1 --defsym ALLOW_UNALIGNED_MEMORY_ACCESS=1')

if executable == 'geoscape':
    program_name = 'SR-Geoscape'
    env.Append(CCFLAGS = '-DEXE_BUILD=EXE_GEOSCAPE')
elif executable == 'tactical':
    program_name = 'SR-Tactical'
    env.Append(CCFLAGS = '-DEXE_BUILD=EXE_TACTICAL')
else:
    program_name = 'SR-Xcom2'

def get_compiler_version(compiler_path, env_path):
    process = subprocess.Popen([compiler_path, '-dumpversion'], stdout=subprocess.PIPE, env={"PATH": env_path})
    (stdout, stderr) = process.communicate()
    if not stdout or stdout.isspace():
        return None
    version = stdout.strip().split(b'.')
    return version

def is_version_ge(version, comparand):
    if version is None or comparand is None:
        return False

    for i in range(len(comparand)):
        if i >= len(version):
            component = 0
        else:
            component = int(version[i])
        if int(comparand[i]) > component:
            return False
        if int(comparand[i]) < component:
            return True
    return True

if not clean and env['CC'] != 'cl':
    compiler_version = get_compiler_version(env['CC'], env['ENV']['PATH'])
    if is_version_ge(compiler_version, [3, 4]):
        env.Append(CCFLAGS = '-fno-PIE')
    if is_version_ge(compiler_version, [6]):
        env.Append(LINKFLAGS = '-no-pie')

display_objs = SConscript('display/SConscript', exports='device env')
audio_objs = SConscript('audio/SConscript', exports='device env')
input_objs = SConscript('input/SConscript', exports='device env')

if llasm_version:
    arch_objs = SConscript('llasm/SConscript', exports='executable version env')
elif device == 'pc-windows' or device == 'pc-linux':
    arch_objs = SConscript('x86/SConscript', exports='device executable version env')
else:
    arch_objs = SConscript('arm/SConscript', exports='executable version env')


env.Program(program_name, Glob('*.c') + display_objs + audio_objs + input_objs + arch_objs)
