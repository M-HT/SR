@part of static recompiler -- do not edit

@@
@@  Copyright (C) 2016-2019 Roman Pauer
@@
@@  Permission is hereby granted, free of charge, to any person obtaining a copy of
@@  this software and associated documentation files (the "Software"), to deal in
@@  the Software without restriction, including without limitation the rights to
@@  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
@@  of the Software, and to permit persons to whom the Software is furnished to do
@@  so, subject to the following conditions:
@@
@@  The above copyright notice and this permission notice shall be included in all
@@  copies or substantial portions of the Software.
@@
@@  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
@@  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
@@  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
@@  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
@@  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
@@  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
@@  SOFTWARE.
@@

.ifdef ALLOW_UNALIGNED_STACK

.macro ALIGN_STACK
    @ do nothing
.endm

.macro RESTORE_STACK
    @ do nothing
.endm

.else

.macro ALIGN_STACK
    @ remember original esp value
        mov eflags, esp
    @ reserve 4 bytes on stack
        sub lr, esp, #4
    @ align stack to 8 bytes
        bic esp, lr, #7
    @ save original esp value on stack
        str eflags, [esp]
.endm

.macro RESTORE_STACK
    @ restore original esp value from stack
        ldr esp, [esp]
.endm

.endif

.macro  Call_void_proc_void proc_name

        stmfd esp!, {eflags, lr}

        ALIGN_STACK

        bl \proc_name

        RESTORE_STACK

        ldmfd esp!, {eflags, lr}
        bx lr

.endm

.macro  Call_void_proc_int32 proc_name

@ tmp1 - parameter

        stmfd esp!, {eflags, lr}

        ALIGN_STACK

        bl \proc_name

        RESTORE_STACK

        ldmfd esp!, {eflags, lr}
        bx lr

.endm

.macro  Call_void_proc_int64 proc_name

@ tmp1,tmp2 - parameter

        stmfd esp!, {eflags, lr}

        ALIGN_STACK

        bl \proc_name

        RESTORE_STACK

        ldmfd esp!, {eflags, lr}
        bx lr

.endm

.macro  Call_int32_proc_void proc_name

@ tmp1 - return value

        stmfd esp!, {eflags, lr}

        ALIGN_STACK

        bl \proc_name

        RESTORE_STACK

        ldmfd esp!, {eflags, lr}
        bx lr

.endm

.macro  Call_int64_proc_void proc_name

@ tmp1,tmp2 - return value

        stmfd esp!, {eflags, lr}

        ALIGN_STACK

        bl \proc_name

        RESTORE_STACK

        ldmfd esp!, {eflags, lr}
        bx lr

.endm

